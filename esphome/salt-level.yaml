#https://docs.m5stack.com/en/core/AtomS3%20Lite
substitutions:
  name: ${name}
  friendly_name: ${friendly_name}
  device_description: "Esphome component for Salt level detection"
  timezone: "Europe/Amsterdam"

packages:
  remote_package:
    url: https://github.com/fonske/Salt-level-tof-atoms3
    ref: main
    files: 
      - esphome/.salt-level-labels-en.yaml
      # - esphome/.salt-level-labels-nl.yaml

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: false

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino

wifi:
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password
 
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${name}
    password: "configesp"
    ap_timeout: 15s
 
captive_portal:

# Sync time with sntp server
time:
  - platform: sntp
    id: sntp_time
    timezone: ${timezone}

# Enable logging
logger:
  baud_rate: 0
  level: INFO

# Enable Home Assistant API
api:
 
ota:

web_server:
  port: 80

i2c:
  - id: bus_a
    sda: GPIO2
    scl: GPIO1

sensor:
  - platform: vl53l0x
    id: distance_cm
    address: 0x29
    update_interval: 5s
    long_range: false
    internal: false
    filters:
      - filter_out: nan
      - lambda: return x*100;
#      - median:
#          window_size: 15
#          send_every: 7
#          send_first_at: 1
 #     - delta: 0.5
      - clamp:
          min_value: 0.0
          max_value: 160.0
    on_value:
      then:
        - sensor.template.publish:
            id: salt_distance
            state: !lambda |-
              return id(distance_cm).state;

# ultrasonic distance sensor.
  - platform: template
    name: ${salt_distance}
    id:  salt_distance
    unit_of_measurement: "cm"
    accuracy_decimals: 1
    icon: "mdi:arrow-expand-vertical" 
    on_value:
      then:
        - sensor.template.publish:
            id: salt_procent
            state: !lambda |-
              const float max_distance = id(salt_height_max).state; // heigt in cm to lowest level
              const float min_distance = id(salt_height_min).state; // height in cm to highest level
              return int((1-((id(salt_distance).state - min_distance)/max_distance))*100);
        - sensor.template.publish:
            id: salt_height
            state: !lambda |-
              const float max_distance = id(salt_height_max).state;  // height in cm to lowest level
              return max_distance-id(salt_distance).state;
        - text_sensor.template.publish:
            id: salt_fill_salt
            state: !lambda |-
              if (id(salt_height).state < id(salt_height_fill).state) {
                return {"${fill_yes}"};
              } else {
                return {"${fill_no}"};
              }
    
      
  # ultrasonic distance sensor calculate tank_percentage
  - platform: template
    id: salt_procent
    name: ${salt_procent}
    unit_of_measurement: "%"
    accuracy_decimals: 0
    icon: "mdi:percent-box-outline" 
    update_interval: 600s
    filters:
    - lambda: |-
        if (x >= 100) return 100.0;
        else if (x <= 0.0) return 0.0;
        else return x;

  # Saltlevel animation picture on dashboard  
  - platform: copy
    source_id: salt_procent
    id: salt_level_animation
    name: ${salt_level_animation}
    filters:
    - lambda: |-
        if (x >= 80) return 100;
        else if (x >= 65 && x <= 79) return 80;
        else if (x >= 40 && x <= 64) return 60;   
        else if (x >= 20 && x <= 39) return 40;
        else if (x >= 10 && x <= 19) return 20;
        else if (x >= 5 && x <= 9) return 10;
        else if (x <= 4) return 0;
        else return x;

          
  # ultrasonic distance sensor calculate salt level from bottom
  - platform: template
    id: salt_height
    name: ${salt_height}
    unit_of_measurement: "cm"
    accuracy_decimals: 1
    icon: "mdi:hydraulic-oil-level" 
    update_interval: 600s
    filters:
    - lambda: |-
        if (x >= 100) return 100.0;
        else if (x <= 0.0) return 0.0;
        else return x;

# Diagnostics wifi and uptime      
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    id: salt_level_wifi_signal_db
    name: ${salt_wifi_signal_db}
    update_interval: 60s
    entity_category: diagnostic

  - platform: copy # Reports the WiFi signal strength in %
    source_id: salt_level_wifi_signal_db
    id: salt_level_wifi_signal_db_percent
    name: ${salt_level_wifi_signal_db_percent}
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: diagnostic

  - platform: uptime
    id: salt_level_uptime
    name: ${salt_level_uptime}
    unit_of_measurement: ${days}
    update_interval: 3600s
    accuracy_decimals: 1
    filters:
      - multiply: 0.000011574

# Text sensors with general information.
text_sensor:
  # Expose ESPHome version as sensor.
  - platform: version
    id: salt_version
    name: ${salt_version}
    hide_timestamp: true

  # Expose WiFi information as sensors.
  - platform: wifi_info
    ip_address:
      name: ${salt_level_ip}
      icon: mdi:ip-network

  # Textsensor "Fill Salt" yes or no.
  - platform: template
    name: ${salt_fill_salt}
    id: salt_fill_salt
    icon: mdi:basket-fill
    update_interval: never

# Output that blinks the LED
output:
  - platform: template
    id: status_output
    type: binary
    write_action:
    - if:
        condition:
          lambda: return (state);
        then:
          - light.turn_on:
              id: led
              brightness: 70%
              red: 100%
              green: 0%
              blue: 0%
        else:
          - light.turn_off: led

light:
  # Enable status LED
#  - platform: status_led
#    output: status_output
#    name: "Status Led"
#    internal: True

  #G35=RGB WS2812C-2020
  - platform: esp32_rmt_led_strip
    rgb_order: GRB
    pin: 35
    num_leds: 4
    # RMT 0 channels will be occupied by IR
    rmt_channel: 1
    chipset: ws2812
    id: led
    name: "Led"

#G41=Button
binary_sensor:
  - platform: gpio
    name: Button
    pin:
      number: GPIO41
      inverted: true
      mode:
        input: true
        pullup: true
    filters:
      - delayed_off: 10ms
    on_press:
      then:
        - logger.log: Button Pressed

# imput numbers as boxes for setting the dimensions of the tank and level alarm.
number:
    ## Set minimum distance (from bottom sensor / underneath plastic cap)
  - platform: template
    id: salt_height_min
    name: ${salt_height_min}
    icon: mdi:toggle-switch-variant
    optimistic: true
    mode: slider
    step: 0.5
    entity_category: config
    min_value: 0
    max_value: 10
    initial_value: 0
    restore_value: yes
    unit_of_measurement: "cm"
    on_value:
      then:
        - sensor.template.publish:
            id: salt_procent
            state: !lambda |-
              const float max_distance = id(salt_height_max).state; // height in cm to lowest level
              const float min_distance = id(salt_height_min).state; // height in cm to highest level
              return int((1-((id(salt_distance).state - min_distance)/max_distance))*100);
        - sensor.template.publish:
            id: salt_height
            state: !lambda |-
              const float max_distance = id(salt_height_max).state;  // height in cm to lowest level
              return max_distance-id(salt_distance).state; 


    ## Set maximum distance (from bottom sensor / underneath plastic cap) to water level (to measure in pipe?)
  - platform: template
    id: salt_height_max
    name: ${salt_height_max}
    icon: mdi:toggle-switch-variant-off
    optimistic: true
    mode: slider
    step: 0.5
    entity_category: config
    min_value: 0
    max_value: 100
    initial_value: 30
    restore_value: yes
    unit_of_measurement: "cm"
    on_value:
      then:
        - sensor.template.publish:
            id: salt_procent
            state: !lambda |-
              const float max_distance = id(salt_height_max).state; // heigt in cm to lowest level
              const float min_distance = id(salt_height_min).state; // height in cm to highest level
              return int((1-((id(salt_distance).state - min_distance)/max_distance))*100);
        - sensor.template.publish:
            id: salt_height
            state: !lambda |-
              const float max_distance = id(salt_height_max).state;  // height in cm to lowest level
              return max_distance-id(salt_distance).state; 

    ## Set alarm level
  - platform: template
    id: salt_height_fill
    name: ${salt_height_fill}
    icon: mdi:hydraulic-oil-temperature
    optimistic: true
    mode: slider
    step: 0.1
    entity_category: config
    min_value: 0
    max_value: 10
    initial_value: 1.5
    restore_value: yes
    unit_of_measurement: ""
    update_interval: 600s
    on_value:
      then:
        - text_sensor.template.publish:
            id: salt_fill_salt
            state: !lambda |-
              if (id(salt_height).state < id(salt_height_fill).state) {
                return {"${salt_level_yes}"};
              } else {
                return {"${salt_level_no}"};
              }
